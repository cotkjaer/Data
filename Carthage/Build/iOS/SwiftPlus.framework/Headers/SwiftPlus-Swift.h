// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import QuartzCore;
@import Dispatch;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSBlockOperation (SWIFT_EXTENSION(SwiftPlus))
- (nonnull instancetype)initWithBlock:(void (^ _Nonnull)(void))block completion:(void (^ _Nullable)(BOOL))completion;
@end

@class NSCoder;
@protocol CAAction;

SWIFT_CLASS("_TtC9SwiftPlus10Connection")
@interface Connection : CAShapeLayer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)updateConnection;
@property (nonatomic) BOOL animatePath;
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)event;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer SWIFT_UNAVAILABLE;
@end


@interface NSDateFormatter (SWIFT_EXTENSION(SwiftPlus))
- (nonnull instancetype)initWithDateFormat:(NSString * _Nonnull)dateFormat;
- (nonnull instancetype)initWithTimeStyle:(NSDateFormatterStyle)timeStyle dateStyle:(NSDateFormatterStyle)dateStyle;
@end


@interface OS_dispatch_queue (SWIFT_EXTENSION(SwiftPlus))
@end


@interface OS_dispatch_semaphore (SWIFT_EXTENSION(SwiftPlus))
@end

@class NSURLResponse;

@interface NSFileManager (SWIFT_EXTENSION(SwiftPlus))
- (void)getDataFromUrlWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completion;
- (NSURL * _Nullable)documentsFolderURL;
- (NSURL * _Nullable)documentURLForFile:(NSString * _Nonnull)fileName fileExtension:(NSString * _Nonnull)fileExtension;
- (NSString * _Nullable)documentsFolderPath;
@end

@class UICollectionViewLayoutAttributes;

SWIFT_CLASS("_TtC9SwiftPlus24LERPCollectionViewLayout")
@interface LERPCollectionViewLayout : UICollectionViewLayout
- (void)prepareLayout;
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

SWIFT_CLASS("_TtC9SwiftPlus31ManagedCollectionViewController")
@interface ManagedCollectionViewController : UICollectionViewController
/**
  Set this if you are updating the elements “manually”, e.g. when rearranging cells
*/
@property (nonatomic) BOOL ignoreManagerChanges;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface ManagedCollectionViewController (SWIFT_EXTENSION(SwiftPlus))
@end


@interface NSError (SWIFT_EXTENSION(SwiftPlus))
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code description:(NSString * _Nullable)description reason:(NSString * _Nullable)reason underlyingError:(NSError * _Nullable)underlyingError;
@end


@interface NSIndexSet (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull indicies;
@end


@interface NSString (SWIFT_EXTENSION(SwiftPlus))
- (nullable instancetype)initWithOptionalString:(NSString * _Nullable)optionalString;
@end


@interface NSNumberFormatter (SWIFT_EXTENSION(SwiftPlus))
@end

@class NSOperation;

@interface NSOperationQueue (SWIFT_EXTENSION(SwiftPlus))
/**
  Adds \code
  operation
  \endcode to queue, but delays the operation \code
  delay
  \endcode seconds
  <ul>
    <li>
    </li>
  </ul>
  \param operation The \code
  NSOperation
  \endcode to add

  \param delay the number of seconds to delay the operation

*/
- (void)addOperation:(NSOperation * _Nonnull)operation withDelay:(double)seconds;
@end


@interface NSOperationQueue (SWIFT_EXTENSION(SwiftPlus))
- (void)addOperationWithBlock:(void (^ _Nonnull)(void))block completion:(void (^ _Nullable)(BOOL))completion;
@end


/**
  A view that allows rearraning of its subviews
*/
SWIFT_CLASS("_TtC9SwiftPlus16RearrangableView")
@interface RearrangableView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)addSubview:(UIView * _Nonnull)view;
- (void)layoutSubviews;
- (void)prepareForInterfaceBuilder;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


@interface NSTimer (SWIFT_EXTENSION(SwiftPlus))
- (nonnull instancetype)initAfter:(NSTimeInterval)interval :(void (^ _Nonnull)(void))closure;
- (nonnull instancetype)initWithEvery:(NSTimeInterval)interval :(void (^ _Nonnull)(void))closure;
@end


@interface NSTimer (SWIFT_EXTENSION(SwiftPlus))
+ (NSTimer * _Nonnull)after:(NSTimeInterval)interval :(void (^ _Nonnull)(void))closure;
+ (NSTimer * _Nonnull)every:(NSTimeInterval)interval :(void (^ _Nonnull)(void))closure;
@end

@class UIColor;

@interface UIActivityIndicatorView (SWIFT_EXTENSION(SwiftPlus))
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color animating:(BOOL)animating hidesWhenStopped:(BOOL)hidesWhenStopped;
@end

@class UIViewController;

@interface UIApplication (SWIFT_EXTENSION(SwiftPlus))
+ (UIViewController * _Nullable)topViewController:(UIViewController * _Nullable)base;
@end


@interface UIApplication (SWIFT_EXTENSION(SwiftPlus))
/**
  returns: the viewcontrollers currently displyed for this application
*/
@property (nonatomic, readonly, copy) NSArray<UIViewController *> * _Nonnull visibleViewControllers;
@end


@interface UIBezierPath (SWIFT_EXTENSION(SwiftPlus))
- (void)translateWithTx:(CGFloat)tx ty:(CGFloat)ty;
- (UIBezierPath * _Nonnull)translatedWithTx:(CGFloat)tx ty:(CGFloat)ty;
- (void)translate:(CGVector)v;
- (UIBezierPath * _Nonnull)translated:(CGVector)v;
- (void)rotate:(CGFloat)angle;
- (UIBezierPath * _Nonnull)rotated:(CGFloat)angle;
- (void)scaleWithSx:(CGFloat)sx sy:(CGFloat)sy;
- (UIBezierPath * _Nonnull)scaledWithSx:(CGFloat)sx sy:(CGFloat)sy;
@end


@interface UIButton (SWIFT_EXTENSION(SwiftPlus))
- (void)centerTitleAndImageWithSpacing:(CGFloat)spacing;
@end


@interface UICollectionView (SWIFT_EXTENSION(SwiftPlus))
- (NSIndexPath * _Nullable)indexPathForLocation:(CGPoint)location;
@end


@interface UICollectionView (SWIFT_EXTENSION(SwiftPlus))
- (void)refreshVisible:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
@end


@interface UICollectionView (SWIFT_EXTENSION(SwiftPlus))
- (NSInteger)numberOfItemsInSectionForIndexPath:(NSIndexPath * _Nullable)indexPath;
@end


@interface UICollectionView (SWIFT_EXTENSION(SwiftPlus))
- (void)performBatchUpdates:(void (^ _Nullable)(void))updates;
- (void)reloadSection:(NSInteger)section;
@end

@class UICollectionViewCell;

@interface UICollectionView (SWIFT_EXTENSION(SwiftPlus))
- (NSSet<UICollectionViewCell *> * _Nonnull)currentlyVisibleCells;
@end


@interface UICollectionView (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly, copy) NSIndexPath * _Nullable lastIndexPath;
@property (nonatomic, readonly, copy) NSIndexPath * _Nullable firstIndexPath;
@end


@interface UICollectionView (SWIFT_EXTENSION(SwiftPlus))
- (void)insertItemAt:(NSIndexPath * _Nullable)indexPath;
- (void)deleteItemAt:(NSIndexPath * _Nullable)indexPath;
- (void)reloadItemAt:(NSIndexPath * _Nullable)indexPath;
- (void)moveItemAt:(NSIndexPath * _Nullable)at to:(NSIndexPath * _Nullable)to;
@end

@class UICollectionViewFlowLayout;

@interface UICollectionViewController (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly, strong) UICollectionViewFlowLayout * _Nullable flowLayout;
@end

@class UIImage;

@interface UIColor (SWIFT_EXTENSION(SwiftPlus))
- (UIImage * _Nonnull)image;
@end


@interface UIColor (SWIFT_EXTENSION(SwiftPlus))
- (nullable instancetype)initWithNamed:(NSString * _Nonnull)named;
@end


@interface UIColor (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly) CGFloat alpha;
@property (nonatomic, readonly) BOOL opaque;
@end


@interface UIColor (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly) BOOL isBright;
@property (nonatomic, readonly) BOOL isDark;
- (UIColor * _Nonnull)brighterColor:(CGFloat)factor;
- (UIColor * _Nonnull)darkerColor:(CGFloat)factor;
@end


@interface UIColor (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly) CGFloat hue;
- (UIColor * _Nonnull)withHue:(CGFloat)hue;
@property (nonatomic, readonly) CGFloat saturation;
- (UIColor * _Nonnull)withSaturation:(CGFloat)saturation;
@property (nonatomic, readonly) CGFloat brightness;
- (UIColor * _Nonnull)withBrightness:(CGFloat)brightness;
@end


@interface UIColor (SWIFT_EXTENSION(SwiftPlus))
- (nonnull instancetype)initWithRgb:(NSUInteger)rgb;
- (nonnull instancetype)initWithR:(NSInteger)r g:(NSInteger)g b:(NSInteger)b;
@property (nonatomic, readonly) CGFloat red;
@property (nonatomic, readonly) CGFloat green;
@property (nonatomic, readonly) CGFloat blue;
@property (nonatomic, readonly) CGFloat white;
@end


@interface UIDatePicker (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, strong) UIColor * _Nullable titlesColor;
@end


@interface UIImageView (SWIFT_EXTENSION(SwiftPlus))
@end


@interface UILabel (SWIFT_EXTENSION(SwiftPlus))
- (void)adjustFontSizeToFitRectWithRect:(CGRect)rect;
@end


@interface UILabel (SWIFT_EXTENSION(SwiftPlus))
/**
  Crossfades the existing text with the \code
  text
  \endcode parameters in \code
  duration
  \endcode seconds
  \code
  - parameter text: the new text
  - parameter duration: the time to spend crossfading
  - parameter ifDifferent: if `true` the change is only animated if it differs from the already set text, defaults to `true`
  - parameter completion: closure that is called when the animation finishes.

  \endcode*/
- (void)setText:(NSString * _Nullable)text duration:(double)duration ifDifferent:(BOOL)ifDifferent completion:(void (^ _Nullable)(BOOL))completion;
@end


@interface UILabel (SWIFT_EXTENSION(SwiftPlus))
- (nonnull instancetype)initWithText:(NSString * _Nullable)text color:(UIColor * _Nullable)color;
@end


@interface UILabel (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, copy) NSString * _Nonnull fontName;
@end

@class UIFont;

@interface UINavigationBar (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, strong) UIColor * _Nullable titleColor;
@property (nonatomic, strong) UIFont * _Nullable titleFont;
@end


@interface UINavigationController (SWIFT_EXTENSION(SwiftPlus))
- (void)popViewControllerWithHandler:(void (^ _Nonnull)(void))completion;
- (void)pushViewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(void))completion;
@end


@interface UINavigationController (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly, copy) NSArray<UIViewController *> * _Nonnull visibleViewControllers;
@end


@interface UIPickerView (SWIFT_EXTENSION(SwiftPlus))
- (CGSize)maxSizeForRowsInComponent:(NSInteger)component;
@end


@interface UISlider (SWIFT_EXTENSION(SwiftPlus))
/**
  The current drawing rectangle for the slider’s track in the sliders coordinate-space, given the current bounds of the slider
*/
@property (nonatomic, readonly) CGRect currentTrackRect;
/**
  The current drawing rectangle for the thumb image in the sliders coordinate-space, given the current bounds, track rectangle, and value of the slider
*/
@property (nonatomic, readonly) CGRect currentThumbRect;
/**
  Centers \code
  view
  \endcode on the thumb image, given the current bounds and value of the slider
*/
- (void)centerViewOnThumb:(UIView * _Nonnull)view;
/**
  Sets \code
  view
  \endcodes frame to match the drawing rectangle of the thumb image, given the current bounds and value of the slider
*/
- (void)frameViewOnThumb:(UIView * _Nonnull)view;
@end


@interface UISplitViewController (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly, copy) NSArray<UIViewController *> * _Nonnull visibleViewControllers;
@end


@interface UIStoryboardSegue (SWIFT_EXTENSION(SwiftPlus))
@end


@interface UITabBarController (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly, copy) NSArray<UIViewController *> * _Nonnull visibleViewControllers;
@end


@interface UITableView (SWIFT_EXTENSION(SwiftPlus))
- (void)refreshCellHeights;
- (void)moveScrollIndicatorToLeft:(BOOL)left offset:(CGFloat)offset;
@end

@class UITableViewCell;

@interface UITableView (SWIFT_EXTENSION(SwiftPlus))
- (NSSet<UITableViewCell *> * _Nonnull)currentlyVisibleCells;
@end


@interface UITextView (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly) CGFloat preferredHeightForCurrentWidth;
- (CGFloat)heightThatFitsWithWidth:(CGFloat)fixedWidth;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
- (CGRect)frameInView:(UIView * _Nonnull)view;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
/**
  Adds \code
  self
  \endcode to a new superview. I \code
  optionalSuperView
  \endcode parameter equal to current superview, nothing happens, if it is nil \code
  self
  \endcode is removed from any current superview
*/
- (void)addToSuperView:(UIView * _Nullable)optionalSuperView;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
- (UIImage * _Nonnull)snapshot;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
- (void)resizeToFitSubviews;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
- (BOOL)anySubViewScrolling;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
- (UIView * _Nullable)findFirstResponder;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly) CGFloat radius;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic) CGFloat cornerRadius;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull superviews;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
/**
  Returns \code
  true
  \endcode if the view has a \code
  draggingDelegate
  \endcode assigned
  note:
  the \code
  draggingDelegate
  \endcode may still prohibit the view from actually dragging
*/
@property (nonatomic, readonly) BOOL draggable;
@end


@interface UIView (SWIFT_EXTENSION(SwiftPlus))
@property (nonatomic) CGFloat borderSize;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@end


@interface UIViewController (SWIFT_EXTENSION(SwiftPlus))
- (BOOL)isViewLoadedAndShowing;
@end

@class UIAlertAction;

@interface UIViewController (SWIFT_EXTENSION(SwiftPlus))
- (void)presentErrorAsAlert:(NSError * _Nullable)error animated:(BOOL)animated handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
@end


@interface UIViewController (SWIFT_EXTENSION(SwiftPlus))
- (void)cover:(double)duration hideActivityView:(BOOL)hideActivityView completion:(void (^ _Nullable)(void))completion;
- (void)uncover:(double)duration completion:(void (^ _Nullable)(void))completion;
@end


@interface UIViewController (SWIFT_EXTENSION(SwiftPlus))
@end


@interface UIViewController (SWIFT_EXTENSION(SwiftPlus))
- (NSArray<UIViewController *> * _Nonnull)viewControllersWithVisibleViews;
- (BOOL)isViewLoadedAndAddedToWindow;
@property (nonatomic, readonly, copy) NSArray<UIViewController *> * _Nonnull visibleViewControllers;
@end


@interface NSUserDefaults (SWIFT_EXTENSION(SwiftPlus))
- (BOOL)hasTextForKey:(NSString * _Nonnull)key;
- (void)setText:(NSString * _Nullable)optionalText forKey:(NSString * _Nonnull)key;
- (NSString * _Nonnull)textForKey:(NSString * _Nonnull)key defaultString:(NSString * _Nonnull)defaultString;
@end

#pragma clang diagnostic pop
